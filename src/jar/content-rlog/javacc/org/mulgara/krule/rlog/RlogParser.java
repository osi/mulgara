/* Generated By:JavaCC: Do not edit this line. RlogParser.java */
package org.mulgara.krule.rlog;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mulgara.krule.rlog.ast.Axiom;
import org.mulgara.krule.rlog.ast.BPredicate;
import org.mulgara.krule.rlog.ast.BPredicateLiteral;
import org.mulgara.krule.rlog.ast.IntegerLiteral;
import org.mulgara.krule.rlog.ast.InvertedPredicate;
import org.mulgara.krule.rlog.ast.Predicate;
import org.mulgara.krule.rlog.ast.PredicateParam;
import org.mulgara.krule.rlog.ast.Rule;
import org.mulgara.krule.rlog.ast.Statement;
import org.mulgara.krule.rlog.ast.StringLiteral;
import org.mulgara.krule.rlog.ast.TypeLiteral;
import org.mulgara.krule.rlog.ast.TypeStatement;
import org.mulgara.krule.rlog.ast.Variable;
import org.mulgara.util.StringUtil;

public class RlogParser implements RlogParserConstants {

  public static List<Statement> parse(String query) throws ParseException {
    RlogParser parser = new RlogParser(new StringReader(query));
    return parser.statements();
  }

  private static final String unq(String str) {
    return str.substring(1, str.length() - 1);
  }

/* statements  ::= (statement)+ */
  final public List<Statement> statements() throws ParseException {
  List<Statement> sList = new ArrayList<Statement>();
  Statement s;
    label_1:
    while (true) {
      s = statement();
                   sList.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIED_BY:
      case INVERT:
      case IDENTIFIER:
      case VARIABLE:
      case TYPE:
      case DOMAIN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
                                        {if (true) return sList;}
    throw new Error("Missing return statement in function");
  }

/* statement   ::= axiom | rule */
  final public Statement statement() throws ParseException {
  Statement s;
    if (jj_2_1(10)) {
      s = axiom();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIED_BY:
      case INVERT:
      case IDENTIFIER:
      case VARIABLE:
      case TYPE:
      case DOMAIN:
        s = rule();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                           {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/* axiom       ::= predicate DOT */
  final public Axiom axiom() throws ParseException {
  Predicate p;
    p = predicate();
    jj_consume_token(DOT);
                        {if (true) return new Axiom(p);}
    throw new Error("Missing return statement in function");
  }

/* rule        ::= IMPLIED_BY predicate_list DOT | predicate IMPLIED_BY predicate_list DOT */
  final public Rule rule() throws ParseException {
  List<Predicate> body;
  Predicate head;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLIED_BY:
      jj_consume_token(IMPLIED_BY);
      body = predicateList();
      jj_consume_token(DOT);
                                            {if (true) return new Rule(body);}
      break;
    case INVERT:
    case IDENTIFIER:
    case VARIABLE:
    case TYPE:
    case DOMAIN:
      head = predicate();
      jj_consume_token(IMPLIED_BY);
      body = predicateList();
      jj_consume_token(DOT);
                                                             {if (true) return new Rule(head, body);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* predicate   ::= type_decl | binary_predicate | INVERT predicate */
  final public Predicate predicate() throws ParseException {
  Predicate p;
    if (jj_2_2(5)) {
      p = typeDecl();
                 {if (true) return p;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case VARIABLE:
      case DOMAIN:
        p = binaryPredicate();
                        {if (true) return p;}
        break;
      case INVERT:
        jj_consume_token(INVERT);
        p = predicate();
                           {if (true) return new InvertedPredicate(p);}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* type_decl   ::= dom? TYPE LPAR parameter_elt RPAR | VARIABLE LPAREN parameter_elt RPAREN */
  final public TypeStatement typeDecl() throws ParseException {
  Token t;
  PredicateParam p;
  String d = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
    case DOMAIN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOMAIN:
        d = dom();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      t = jj_consume_token(TYPE);
      jj_consume_token(LPAR);
      p = parameterElt();
      jj_consume_token(RPAR);
    {if (true) return new TypeStatement(new TypeLiteral(d, t.image), p);}
      break;
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
      jj_consume_token(LPAR);
      p = parameterElt();
      jj_consume_token(RPAR);
                                                {if (true) return new TypeStatement(new Variable(t.image), p);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* binary_predicate ::= dom? IDENTIFIER LPAR parameter_elt COMMA parameter RPAR
                      | VARIABLE LPAR parameter_elt COMMA parameter RPAR */
  final public BPredicate binaryPredicate() throws ParseException {
  String d = null;
  Token pred;
  PredicateParam left, right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case DOMAIN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOMAIN:
        d = dom();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      pred = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAR);
      left = parameterElt();
      jj_consume_token(COMMA);
      right = parameter();
      jj_consume_token(RPAR);
    {if (true) return new BPredicate(new BPredicateLiteral(d, pred.image), left, right);}
      break;
    case VARIABLE:
      pred = jj_consume_token(VARIABLE);
      jj_consume_token(LPAR);
      left = parameterElt();
      jj_consume_token(COMMA);
      right = parameter();
      jj_consume_token(RPAR);
    {if (true) return new BPredicate(new Variable(pred.image), left, right);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* parameter_elt    ::= dom? IDENTIFIER | dom? TYPE | VARIABLE */
  final public PredicateParam parameterElt() throws ParseException {
  String d = null;
  Token t;
  PredicateParam p;
    if (jj_2_3(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOMAIN:
        d = dom();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                              {if (true) return new BPredicateLiteral(d, t.image);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
      case DOMAIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOMAIN:
          d = dom();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        t = jj_consume_token(TYPE);
                        {if (true) return new TypeLiteral(d, t.image);}
        break;
      case VARIABLE:
        t = jj_consume_token(VARIABLE);
                 {if (true) return new Variable(t.image);}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* parameter        ::= VARIABLE | dom? IDENTIFIER | dom? TYPE | literal */
  final public PredicateParam parameter() throws ParseException {
  PredicateParam p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case VARIABLE:
    case TYPE:
    case DOMAIN:
      p = parameterElt();
                     {if (true) return p;}
      break;
    case STRING_LITERAL:
    case INTEGER_LITERAL:
      p = literal();
                {if (true) return p;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* literal          ::= STRING_LITERAL | INTEGER_LITERAL */
  final public PredicateParam literal() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                        {if (true) return new IntegerLiteral(t.image);}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                       {if (true) return new StringLiteral(StringUtil.unescapeJavaString(unq(t.image)));}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* predicate_list   ::= predicate (COMMA predicate)* */
  final public List<Predicate> predicateList() throws ParseException {
  List<Predicate> predicates = new ArrayList<Predicate>();
  Predicate p;
    p = predicate();
                  predicates.add(p);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      p = predicate();
                           predicates.add(p);
    }
    {if (true) return predicates;}
    throw new Error("Missing return statement in function");
  }

/* dom              ::= DOMAIN */
  final public String dom() throws ParseException {
  Token d;
    d = jj_consume_token(DOMAIN);
               {if (true) return d.image.substring(0, d.image.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(INVERT)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  public RlogParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1703000,0x1703000,0x1703000,0x1302000,0x1000000,0x1600000,0x1000000,0x1300000,0x1000000,0x1000000,0x1600000,0x1f80000,0x880000,0x10000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public RlogParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public RlogParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RlogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RlogParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RlogParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RlogParser(RlogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(RlogParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
